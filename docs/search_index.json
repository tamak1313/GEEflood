[
["index.html", "GEE学習サイト 初めに 0.1 対象者 0.2 作業環境", " GEE学習サイト Tamaki.M 2021-01-07 初めに このサイトは、Google earth engineを活用して洪水被害図を作成する方法について詳細に紹介します。衛星データから自分が必要とするデータを作成したい、Google earth engine初心者の方を想定し、このサイトを読めば UN Spiderが提供しているコードにのっとって説明をしています。元のサイトは、以下のURLからら確認できます。 (https://un-spider.org/advisory-support/recommended-practices/recommended-practice-google-earth-engine-flood-mapping/step-by-step) コードを詳しく知る前に、まずはどのようなものが出来上がるのか確認したいという方は、以下のサイトに従って作成してみてください。 (https://tamak1313.github.io/cosmobook/) 0.1 対象者 衛星データ初心者 GEE初心者 0.2 作業環境 2020年12月現在 Windows 10 64bit "],
["コードを利用した洪水マップの作成.html", "Chapter 1 コードを利用した洪水マップの作成 1.1 対象エリア 1.2 対象期間 1.3 各種設定 ", " Chapter 1 コードを利用した洪水マップの作成 まずは以下のコードを自分の研究対象に書き換えてみましょう。 (https://un-spider.org/advisory-support/recommended-practices/recommended-practice-google-earth-engine-flood-mapping/step-by-step) 対象エリア、対象期間は以下の方法で変更することができます。 1.1 対象エリア ①地図上のツールバーの一番右(■)をクリックすると、研究対象エリアを四角形で囲むことができます。 GEE polygon1 ②地図上のツールバーの右から2番目(5角形)をクリックすると、研究対象エリアにピンを立て、必要最低限のエリアを選択することが可能です。 GEE polygon2 1.2 対象期間 洪水前後の日時(期間)を設定しましょう。 ＊使用するデータはSentinel-1で6日周期であることに留意。 1.3 各種設定 基本的にここのコードは変更せずに使います。。詳細な説明は省略しますが、対象地域等により、必要がある場合のみ変更して利用してみてください。 var polarization = &quot;VH&quot;; /*or &#39;VV&#39; SARセンサは縦方向の電磁波を送信します。縦波を単一平面(偏波)で送信することが可能です。洪水マッピングでは、ほとんどの場合VHが好まれます。 VH:垂直送信、水平受信 VV:垂直送信、垂直受信 var pass_direction = &quot;DESCENDING&quot;; /* or &#39;ASCENDING&#39; var difference_threshold = 1.25; 差分画像に適用される閾値を定義します。 var relative_orbit = 79; "],
["データの選択と前処理.html", "Chapter 2 データの選択と前処理 2.1 対象画像の選択・出力と画像の前処理", " Chapter 2 データの選択と前処理 まずはGoogle earth engineの画面について、見ていきましょう。Google earth engineの画面は、大きく分けて下のような3パートに分かれています。 ①Code　Editor：コードを入力する ② Inspector：マップ上に配置されたオブジェクトを検索する Console：生成されたマップやメッセージ(printした結果)が表示される Tasks:タスクをエクスポートする。その際、ファイル形式や解像度を設定することが可能 ③Map：Code Editor(①)に入力したコードの結果等がGoogleMap上に表示される ①Code editorに実行したいコードを入力し、【RUN】すると、②Consoleに結果が出力され、③Map上に表示されます。結果を保存したい場合には、Consoleから保存作業を行うと、自身のGoogle Drive上に結果が保存されるようになっています。 2.1 対象画像の選択・出力と画像の前処理 それでは早速、コードの説明に入ります。。以下のコードは研究対象等によって変更することなく、そのまま使うことができます。 var aoi = ee.FeatureCollection(geometry); //ジオメトリーの名称を&quot;aoi&quot;に変更する // パラメーターを定義する前のSentinel-1 GRD(対象データ)をロードし、フィルターをかける var collection= ee.ImageCollection(&#39;COPERNICUS/S1_GRD&#39;) .filter(ee.Filter.eq(&#39;instrumentMode&#39;,&#39;IW&#39;)) .filter(ee.Filter.listContains(&#39;transmitterReceiverPolarisation&#39;, polarization)) .filter(ee.Filter.eq(&#39;orbitProperties_pass&#39;,pass_direction)) .filter(ee.Filter.eq(&#39;resolution_meters&#39;,10)) //.filter(ee.Filter.eq(&#39;relativeOrbitNumber_start&#39;,relative_orbit )) .filterBounds(aoi) .select(polarization); // 画像を選択する var before_collection = collection.filterDate(before_start, before_end); var after_collection = collection.filterDate(after_start,after_end); // 選択したタイルをコンソールに出力する // メタデータからデータを抽出する(メタデータ：：主となるデータの説明書きが書いてあるデータ) function dates(imgcol){ var range = imgcol.reduceColumns(ee.Reducer.minMax(), [&quot;system:time_start&quot;]); var printed = ee.String(&#39;from &#39;) .cat(ee.Date(range.get(&#39;min&#39;)).format(&#39;YYYY-MM-dd&#39;)) .cat(&#39; to &#39;) .cat(ee.Date(range.get(&#39;max&#39;)).format(&#39;YYYY-MM-dd&#39;)); return printed; } // コンソールに洪水前画像を出力する var before_count = before_collection.size(); print(ee.String(&#39;Tiles selected: Before Flood &#39;).cat(&#39;(&#39;).cat(before_count).cat(&#39;)&#39;), dates(before_collection), before_collection); // コンソールに洪水後画像を出力する var after_count = before_collection.size(); print(ee.String(&#39;Tiles selected: After Flood &#39;).cat(&#39;(&#39;).cat(after_count).cat(&#39;)&#39;), dates(after_collection), after_collection); // 選択したタイルにモザイクをかけ、対象エリアをクリップする var before = before_collection.mosaic().clip(aoi); var after = after_collection.mosaic().clip(aoi); // Smoothing var smoothing_radius = 50; var before_filtered = before.focal_mean(smoothing_radius, &#39;circle&#39;, &#39;meters&#39;); var after_filtered = after.focal_mean(smoothing_radius, &#39;circle&#39;, &#39;meters&#39;); "],
["浸水範囲の算出.html", "Chapter 3 浸水範囲の算出 3.1 洪水前後の画像を比較する 3.2 洪水被害を受けたピクセルの面積を集計", " Chapter 3 浸水範囲の算出 JRCレイヤー、HydroSHEDSを使って、浸水範囲を算出する方法を説明します。 JRC Global Surface Water Mapping Layers, v1.2：1984年から2019年までの表層水の位置と時間的分布のマップが含まれており、それらの水面の広がりと変化に関する統計を提供している。 WWF/HydroSHEDS/03VFDEM：HydroSHEDSは、地域規模および地球規模のアプリケーションのための水文情報を一貫したフォーマットで提供するマッピング製品。河川ネットワーク、流域境界、排水方向、流量累積など、様々なスケールの地理参照データセット（ベクトルとラスター）を提供し、NASAのシャトルレーダー地形ミッション（SRTM）によって2000年に取得された標高データに基づいている。 3.1 洪水前後の画像を比較する 洪水前後の画像を比較し、洪水による浸水域を検出してみましょう。 まず、洪水前後画像を計算します。 var difference = after_filtered.divide(before_filtered); // 定義済みの差分しきい値を適用して、洪水範囲マスクを作成(あらかじめ定義した基準となる値と各値を比較することによって、洪水前後の変化有無を判定する) var threshold = difference_threshold; var difference_binary = difference.gt(threshold); ほかのデータセットを使って、さらに結果の精度を高めていきましょう。 // JRCレイヤーを利用して、parmanent water(洪水に関わらず、常にある水)を検出する。 var swater = ee.Image(&#39;JRC/GSW1_0/GlobalSurfaceWater&#39;).select(&#39;seasonality&#39;); var swater_mask = swater.gte(10).updateMask(swater.gte(10)); // 多年水域(水量＞10か月/年)を０とする浸水層 var flooded_mask = difference_binary.where(swater_mask,0); // 洪水による浸水エリア var flooded = flooded_mask.updateMask(flooded_mask); // ピクセルの接続性を計算する。この操作により、洪水範囲プロダクトのノイズを低減できる var connections = flooded.connectedPixelCount(); var flooded = flooded.updateMask(connections.gte(8)); // デジタル標高モデルを使用して、5％以上の傾斜がある領域をマスクアウトする var DEM = ee.Image(&#39;WWF/HydroSHEDS/03VFDEM&#39;); var terrain = ee.Algorithms.Terrain(DEM); var slope = terrain.select(&#39;slope&#39;); var flooded = flooded.updateMask(slope.lt(5)); 3.2 洪水被害を受けたピクセルの面積を集計 最終的な洪水面積を計算しましょう。 // それぞれのピクセルの地域情報を含んだラスターレイヤーを作成 var flood_pixelarea = flooded.select(polarization) .multiply(ee.Image.pixelArea()); // 演算時間を減らすため、デフォルト設定(正確な結果を算出したい場合は、”bestEffort”をfalseに設定し、maxPixelsを増加させる) var flood_stats = flood_pixelarea.reduceRegion({ reducer: ee.Reducer.sum(), geometry: aoi, scale: 10, // native resolution //maxPixels: 1e9, bestEffort: true }); // メートルをヘクタールに変換 var flood_area_ha = flood_stats .getNumber(polarization) .divide(10000) .round(); "],
["被害評価.html", "Chapter 4 被害評価 4.1 “Estimated number of exposed people” 4.2 “Estimated affected cropland” 4.3 “Estimated affected urban area”", " Chapter 4 被害評価 この章では、各ピクセルにおける被害状況を算出する方法を説明します。 “Estimated number of exposed people”：洪水の影響を受けた推定人口 “Estimated affected cropland”：影響を受けた耕作地の推定面積 “Estimated affected urban area”：影響を受けた都市の推定面積 4.1 “Estimated number of exposed people” JRC Global Human Settlement Popluation Density layerを利用して、洪水の影響を受けた人口を算出します。 JRC Global Human Settlement Popluation Density layer：参照期間（1975年、1990年、2000年、2015年）の人口分布と密度を、1セルあたりの人口数で表したもの // JRCレイヤー(JRC Global Human Settlement Popluation Density layer)をロードする Resolution: 250. //１セル当たりの人口 var population_count = ee.Image(&#39;JRC/GHSL/P2016/POP_GPW_GLOBE_V1/2015&#39;).clip(aoi); 4.1.1 被害人口を算出する // GHSL(the Global Human Settlement Layer))を投影させる var GHSLprojection = population_count.projection(); // GHSLスケールに洪水レイヤーを再投影する var flooded_res1 = flooded .reproject({ crs: GHSLprojection }); // the resampled flood layerを使い、被害人口を示すレイヤーを作成する var population_exposed = population_count .updateMask(flooded_res1) .updateMask(population_count); //被害人口ラスターのピクセルあたりの数値を計算する var stats = population_exposed.reduceRegion({ reducer: ee.Reducer.sum(), geometry: aoi, scale: 250, maxPixels:1e9 }); // 被害人口を整数値で算出する var number_pp_exposed = stats.getNumber(&#39;population_count&#39;).round(); 4.2 “Estimated affected cropland” // MODIS Land Cover Type Yearly Global 500mを使用する // 最新の土地被覆データ(MODIS)をフィルターにかける var LC = ee.ImageCollection(&#39;MODIS/006/MCD12Q1&#39;) .filterDate(&#39;2014-01-01&#39;,after_end) //日時の設定 .sort(&#39;system:index&#39;,false) .select(&quot;LC_Type1&quot;) //Layersの指定 .first() .clip(aoi); //画像をジオメトリにクリップする // the classes cropland (&gt;60%) and Cropland/Natural である耕作地ピクセルだけを抽出する // 植生モザイク: mosaics of small-scale cultivation 40-60% incl. natural vegetation var cropmask = LC .eq(12) //与えられた値と等しいメタデータにフィルターをかける .or(LC.eq(14)) var cropland = LC .updateMask(cropmask)　//既存のマスクがゼロではないすべての位置で画像のマスクを更新。出力画像は入力画像のメタデータとフットプリントを保持する。 // MODISを投影させる var MODISprojection = LC.projection(); // MODISスケールにflood layerを再投影する var flooded_res = flooded .reproject({ crs: MODISprojection }); // the resampled flood layerを使って、耕作地への影響を算出する var cropland_affected = flooded_res .updateMask(cropland) // affected cropland layerのピクセルを取得する var crop_pixelarea = cropland_affected .multiply(ee.Image.pixelArea()); //calcuate the area of each pixel // affected cropland layerのピクセルを足し合わせる var crop_stats = crop_pixelarea.reduceRegion({ reducer: ee.Reducer.sum(), //sum all pixels with area information geometry: aoi, scale: 500, maxPixels: 1e9 }); // ヘクタールに換算する var crop_area_ha = crop_stats .getNumber(polarization) .divide(10000) .round(); 4.3 “Estimated affected urban area” 同様にして都市部についても算出します。 // MODIS Land Coverを使用する // 都市エリアをフィルターにかける var urbanmask = LC.eq(13) var urban = LC .updateMask(urbanmask) //the resampled flood layerを使って、影響を受けた都市部を算出する var urban_affected = urban .mask(flooded_res) .updateMask(urban); // affected urban layerのピクセルを取得する var urban_pixelarea = urban_affected .multiply(ee.Image.pixelArea()); //calcuate the area of each pixel // affected cropland layerのピクセルを集計する var urban_stats = urban_pixelarea.reduceRegion({ reducer: ee.Reducer.sum(), //sum all pixels with area information geometry: aoi, scale: 500, bestEffort: true, }); //　ヘクタールに換算する var urban_area_ha = urban_stats .getNumber(&#39;LC_Type1&#39;) .divide(10000) .round(); "],
["プロダクトの出力.html", "Chapter 5 プロダクトの出力 5.1 レイヤーをMap上に表示する 5.2 TIFF形式で、Googleドライブに出力する", " Chapter 5 プロダクトの出力 前章までに利用・作成したレイヤーをMap上に表示してみましょう。 5.1 レイヤーをMap上に表示する 人口密度や被害人口等は、各値における色を自由に設定することができます。 // Before and after flood SAR mosaic Map.centerObject(aoi,8); Map.addLayer(before_filtered, {min:-25,max:0}, &#39;Before Flood&#39;,0); Map.addLayer(after_filtered, {min:-25,max:0}, &#39;After Flood&#39;,1); // Difference layer Map.addLayer(difference,{min:0,max:2},&quot;Difference Layer&quot;,0); // Flooded areas Map.addLayer(flooded,{palette:&quot;0000FF&quot;},&#39;Flooded areas&#39;); // Population Density var populationCountVis = { min: 0, max: 200.0, palette: [&#39;060606&#39;,&#39;337663&#39;,&#39;337663&#39;,&#39;ffffff&#39;], }; Map.addLayer(population_count, populationCountVis, &#39;Population Density&#39;,0); // Exposed Population var populationExposedVis = { min: 0, max: 200.0, palette: [&#39;yellow&#39;, &#39;orange&#39;, &#39;red&#39;], }; Map.addLayer(population_exposed, populationExposedVis, &#39;Exposed Population&#39;); // MODIS Land Cover var LCVis = { min: 1.0, max: 17.0, palette: [ &#39;05450a&#39;, &#39;086a10&#39;, &#39;54a708&#39;, &#39;78d203&#39;, &#39;009900&#39;, &#39;c6b044&#39;, &#39;dcd159&#39;, &#39;dade48&#39;, &#39;fbff13&#39;, &#39;b6ff05&#39;, &#39;27ff87&#39;, &#39;c24f44&#39;, &#39;a5a5a5&#39;, &#39;ff6d4c&#39;, &#39;69fff8&#39;, &#39;f9ffa4&#39;, &#39;1c0dff&#39; ], }; Map.addLayer(LC, LCVis, &#39;Land Cover&#39;,0); // Cropland var croplandVis = { min: 0, max: 14.0, palette: [&#39;30b21c&#39;], }; Map.addLayer(cropland, croplandVis, &#39;Cropland&#39;,0) // Affected cropland Map.addLayer(cropland_affected, croplandVis, &#39;Affected Cropland&#39;); // Urban var urbanVis = { min: 0, max: 13.0, palette: [&#39;grey&#39;], }; Map.addLayer(urban, urbanVis, &#39;Urban&#39;,0) // Affected urban Map.addLayer(urban_affected, urbanVis, &#39;Affected Urban&#39;); 5.2 TIFF形式で、Googleドライブに出力する それでは,結果をGoogleドライブに出力していきましょう。Google earth engineで作成したファイルは、Googleドライブに出力されます。 // TIFFファイル形式で出力 Export.image.toDrive({ image: flooded, description: &#39;Flood_extent_raster&#39;, fileNamePrefix: &#39;flooded&#39;, region: aoi, maxPixels: 1e10 }); // Export flooded area as shapefile (for further analysis in e.g. QGIS) // flood rasterをポリゴンに転換する var flooded_vec = flooded.reduceToVectors({ scale: 10, geometryType:&#39;polygon&#39;, geometry: aoi, eightConnected: false, bestEffort:true, tileScale:2, }); // flood polygonsをシェープファイルとして出力する Export.table.toDrive({ collection:flooded_vec, description:&#39;Flood_extent_vector&#39;, fileFormat:&#39;SHP&#39;, fileNamePrefix:&#39;flooded_vec&#39; }); // Exposed population density Export.image.toDrive({ image:population_exposed, description:&#39;Exposed_Populuation&#39;, scale: 250, fileNamePrefix:&#39;population_exposed&#39;, region: aoi, maxPixels:1e10 }); "],
["結果の表示.html", "Chapter 6 結果の表示 6.1 地図上に結果を表示する① 6.2 凡例を作成する② 6.3 地図上に凡例を表示する", " Chapter 6 結果の表示 マップ上に表示する方法について説明します。 6.1 地図上に結果を表示する① パネル表示① 6.1.1 結果を表示するパネルの位置を設定する 位置や余白等を自分で好きなように設定することができます。 var results = ui.Panel({ style: { position: &#39;bottom-left&#39;, //位置 padding: &#39;8px 15px&#39;, //ボックス内の余白 width: &#39;350px&#39; //幅 } }); 6.1.2 パネルの表示形式(文字や余白等)を設定する フォントや文字の太さ、色なども変更できます。 var textVis = { &#39;margin&#39;:&#39;0px 8px 2px 0px&#39;, //余白 &#39;fontWeight&#39;:&#39;bold&#39; //フォントの太さ(&quot;normal&quot;が標準、&quot;bold&quot;は太字) }; var numberVIS = { &#39;margin&#39;:&#39;0px 0px 15px 0px&#39;, &#39;color&#39;:&#39;bf0f19&#39;, //色 &#39;fontWeight&#39;:&#39;bold&#39; }; var subTextVis = { &#39;margin&#39;:&#39;0px 0px 2px 0px&#39;, &#39;fontSize&#39;:&#39;12px&#39;, //文字のサイズ &#39;color&#39;:&#39;grey&#39; }; var titleTextVis = { &#39;margin&#39;:&#39;0px 0px 15px 0px&#39;, &#39;fontSize&#39;: &#39;18px&#39;, &#39;font-weight&#39;:&#39;&#39;, &#39;color&#39;: &#39;3333ff&#39; }; 6.1.3 結果のラベルを作成する // タイトル var title = ui.Label(&#39;Results&#39;, titleTextVis); // &quot;Flood status between&quot; var text1 = ui.Label(&#39;Flood status between:&#39;,textVis); var number1 = ui.Label(after_start.concat(&quot; and &quot;,after_end),numberVIS); // &quot;Estimated flood extent&quot; var text2 = ui.Label(&#39;Estimated flood extent:&#39;,textVis); var text2_2 = ui.Label(&#39;Please wait...&#39;,subTextVis); dates(after_collection).evaluate(function(val){text2_2.setValue(&#39;based on Senintel-1 imagery &#39;+val)}); var number2 = ui.Label(&#39;Please wait...&#39;,numberVIS); flood_area_ha.evaluate(function(val){number2.setValue(val+&#39; hectares&#39;)}),numberVIS; // &quot;Estimated number of exposed people&quot; var text3 = ui.Label(&#39;Estimated number of exposed people: &#39;,textVis); var text3_2 = ui.Label(&#39;based on GHSL 2015 (250m)&#39;,subTextVis); var number3 = ui.Label(&#39;Please wait...&#39;,numberVIS); number_pp_exposed.evaluate(function(val){number3.setValue(val)}),numberVIS; // &quot;Estimated affected cropland&quot; var MODIS_date = ee.String(LC.get(&#39;system:index&#39;)).slice(0,4); var text4 = ui.Label(&#39;Estimated affected cropland:&#39;,textVis); var text4_2 = ui.Label(&#39;Please wait&#39;, subTextVis) MODIS_date.evaluate(function(val){text4_2.setValue(&#39;based on MODIS Land Cover &#39;+val +&#39; (500m)&#39;)}), subTextVis; var number4 = ui.Label(&#39;Please wait...&#39;,numberVIS); crop_area_ha.evaluate(function(val){number4.setValue(val+&#39; hectares&#39;)}),numberVIS; // &quot;Estimated affected urban area&quot; var text5 = ui.Label(&#39;Estimated affected urban areas:&#39;,textVis); var text5_2 = ui.Label(&#39;Please wait&#39;, subTextVis) MODIS_date.evaluate(function(val){text5_2.setValue(&#39;based on MODIS Land Cover &#39;+val +&#39; (500m)&#39;)}), subTextVis; var number5 = ui.Label(&#39;Please wait...&#39;,numberVIS); urban_area_ha.evaluate(function(val){number5.setValue(val+&#39; hectares&#39;)}),numberVIS; // 責任・権利関連 var text6 = ui.Label (&#39;Disclaimer: This product has been derived automatically without validation data. All geographic information has limitations due to the scale, resolution, date and interpretation of the original source materials. No liability concerning the content or the use thereof is assumed by the producer.&#39;,subTextVis) // Produced by... var text7 = ui.Label(&#39;Script produced by: UN-SPIDER December 2019&#39;, subTextVis) 6.1.4 パネルにラベルを加える results.add(ui.Panel([ title, text1, number1, text2, text2_2, number2, text3, text3_2, number3, text4, text4_2, number4, text5, text5_2, number5, text6, text7] )); // 地図にパネルを加える Map.add(results); 6.2 凡例を作成する② 凡例② 6.2.1 パネルの位置を設定する var legend = ui.Panel({ style: { position: &#39;bottom-right&#39;, padding: &#39;8px 15px&#39;, } }); 6.2.2 塗分けの凡例を作成する (参考：https://mygeoblog.com/2016/12/09/add-a-legend-to-to-your-gee-map/) //凡例のタイトルを作成する var legendTitle = ui.Label(&#39;Legend&#39;,titleTextVis); //パネルにタイトルをつける legend.add(legendTitle); //凡例のスタイルを設定する var makeRow = function(color, name) { // ラベル(カラーボックス)を作成する var colorBox = ui.Label({ style: { backgroundColor: color, padding: &#39;8px&#39;, margin: &#39;0 0 4px 0&#39; } }); // 説明をつける var description = ui.Label({ value: name, style: {margin: &#39;0 0 4px 6px&#39;} }); // 垂直に並べる return ui.Panel({ widgets: [colorBox, description], layout: ui.Panel.Layout.Flow(&#39;horizontal&#39;) }); }; // 色 var palette =[&#39;#0000FF&#39;, &#39;#30b21c&#39;, &#39;grey&#39;]; // 凡例の名前を設定する var names = [&#39;potentially flooded areas&#39;,&#39;affected cropland&#39;,&#39;affected urban&#39;]; // 色と名前を加える for (var i = 0; i &lt; 3; i++) { legend.add(makeRow(palette[i], names[i])); } 6.2.3 “Exposed population density”の凡例を作成する var legendTitle2 = ui.Label({ value: &#39;Exposed population density&#39;, style: { fontWeight: &#39;bold&#39;, fontSize: &#39;15px&#39;, margin: &#39;10px 0 0 0&#39;, padding: &#39;0&#39; } }); // パネルにタイトルをつける legend.add(legendTitle2); // 凡例を作成する var lon = ee.Image.pixelLonLat().select(&#39;latitude&#39;); var gradient = lon.multiply((populationExposedVis.max-populationExposedVis.min)/100.0).add(populationExposedVis.min); var legendImage = gradient.visualize(populationExposedVis); 6.3 地図上に凡例を表示する var panel = ui.Panel({ widgets: [ ui.Label(&#39;&gt; &#39;.concat(populationExposedVis[&#39;max&#39;])) ], }); legend.add(panel); // 画像からサムネイルを作成する var thumbnail = ui.Thumbnail({ image: legendImage, params: {bbox:&#39;0,0,10,100&#39;, dimensions:&#39;10x50&#39;}, style: {padding: &#39;1px&#39;, position: &#39;bottom-center&#39;} }); // 凡例にサムネイルをつける legend.add(thumbnail); var panel = ui.Panel({ widgets: [ ui.Label(populationExposedVis[&#39;min&#39;]) ], }); legend.add(panel); // 地図上に凡例を表示させる Map.add(legend); "]
]
